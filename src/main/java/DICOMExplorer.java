
import com.pixelmed.dicom.AttributeList;
import com.pixelmed.dicom.AttributeTag;
import com.pixelmed.dicom.DicomDirectory;
import com.pixelmed.dicom.DicomDirectoryRecord;
import com.pixelmed.dicom.DicomException;
import com.pixelmed.dicom.DicomInputStream;
import com.pixelmed.dicom.TagFromName;
import com.pixelmed.display.SourceImage;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author KIIT
 */
public class DICOMExplorer extends javax.swing.JFrame {
    
    
    private File dicomdir;

    /**
     * Creates new form DICOMExplorer
     */
    public DICOMExplorer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        browseButton = new javax.swing.JButton();
        jLabelImageDisplay = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTreeDicomdir = new javax.swing.JTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        browseButton.setText("Browse..");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        jTreeDicomdir.setModel(null);
        jTreeDicomdir.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTreeDicomdirValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTreeDicomdir);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelImageDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 660, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(browseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(browseButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelImageDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 536, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addComponent(jScrollPane1)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser jfc = new JFileChooser("C://Users/KIIT/Downloads/Test_Dicom_images/");
        
        int returnValue = jfc.showOpenDialog(null);
        
        if(returnValue == JFileChooser.APPROVE_OPTION){
            dicomdir  = jfc.getSelectedFile();
            //System.out.println(selectedFile.getAbsolutePath());   // for checking the path is fetched successfully
            //dicomdirPath = selectedFile.getAbsolutePath();
            loadDicomDir();
            
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void jTreeDicomdirValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTreeDicomdirValueChanged
        // TODO add your handling code here:
        
        Object selected  = jTreeDicomdir.getLastSelectedPathComponent();
        
        DicomDirectoryRecord ddr = (DicomDirectoryRecord) jTreeDicomdir.getLastSelectedPathComponent();
        
        AttributeList al = ddr.getAttributeList();
        
        if(al.get(TagFromName.DirectoryRecordType).getSingleStringValueOrEmptyString().equals("IMAGE")){
        
            String path = al.get(TagFromName.ReferencedFileID).getDelimitedStringValuesOrEmptyString();
            //System.out.println(path);
            File image = new File(dicomdir.getParent(), path);
            
            loadanddisplay(image);
            
    }
        
        Set<AttributeTag> keys = al.keySet();
        
        
        //for checking the tags
        for(AttributeTag key : keys){
            //System.out.println( "(" + key.toString() + ")" + al.get(key).getDelimitedStringValuesOrEmptyString());
        }
        
    }//GEN-LAST:event_jTreeDicomdirValueChanged
    
    private void loadDicomDir(){
        
        try {
            DicomInputStream dis = new DicomInputStream(dicomdir);
            AttributeList al = new AttributeList();
            al.read(dis);
            
            DicomDirectory ddr = new DicomDirectory(al);
            
            jTreeDicomdir.setModel(ddr);
            
        } catch (IOException ex) {
            Logger.getLogger(DICOMExplorer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DicomException ex) {
            Logger.getLogger(DICOMExplorer.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    private void loadanddisplay(File selectedFile){
        try {
            SourceImage sImg = new SourceImage(selectedFile.getAbsolutePath());
            Image img  = sImg.getBufferedImage();
            ImageIcon icon  = new ImageIcon(img);
            jLabelImageDisplay.setIcon(icon);
        } catch (IOException ex) {
            Logger.getLogger(DICOMExplorer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DicomException ex) {
            Logger.getLogger(DICOMExplorer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DICOMExplorer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DICOMExplorer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DICOMExplorer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DICOMExplorer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DICOMExplorer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JLabel jLabelImageDisplay;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTreeDicomdir;
    // End of variables declaration//GEN-END:variables
}
